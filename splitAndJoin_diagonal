Input:

{
    "employeeId" : "122",
    "employeeName" : "Nitin",
    "projectId" : "1",
    "projectName" : "xyz",
    "levelId" : "122",
    "levelName" : "Senior"
}


CODE:::::

%dw 2.0
output application/json
import * from dw::core::Objects
var spiltPayload = payload divideBy 2
fun indexPayload(previosPayload) = (
    flatten(spiltPayload[0 to previosPayload])
)
---
(spiltPayload map using (previosPayload = indexPayload($$)) {
    newPayload : ((previosPayload))

}.newPayload) map () -> {
    newPayload : $ reduce ($$ ++ $)
}.newPayload






output:
[
  {
    "employeeId": "122",
    "employeeName": "Nitin"
  },
  {
    "employeeId": "122",
    "employeeName": "Nitin",
    "projectId": "1",
    "projectName": "xyz"
  },
  {
    "employeeId": "122",
    "employeeName": "Nitin",
    "projectId": "1",
    "projectName": "xyz",
    "levelId": "122",
    "levelName": "Senior"
  }
]






Input:

[
  {
    "employeeId": "122",
    "employeeName": "Nitin"
  },
  {
    "employeeId": "122",
    "employeeName": "Nitin",
    "projectId": "1",
    "projectName": "xyz"
  },
  {
    "employeeId": "122",
    "employeeName": "Nitin",
    "projectId": "1",
    "projectName": "xyz",
    "levelId": "122",
    "levelName": "Senior"
  }
]


Code::: for csv 

%dw 2.0
output application/csv header = false
---
payload map () -> {
    "list" : "listName",
    "employeeId" : $.employeeId,
    "projectId" : $.projectId,
    "levelId" : $.levelId,
    "value" : $[-1]
}


output::::

listName,122,,,Nitin
listName,122,1,,xyz
listName,122,1,122,Senior


